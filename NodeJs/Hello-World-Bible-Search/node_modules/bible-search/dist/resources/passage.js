'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

var inherits = _util2['default']._extend;

/**
 * Bible Api Passage class.
 * @class
 */

var BibleApiPassage = (function (_BibleApiResource) {
  _inherits(BibleApiPassage, _BibleApiResource);

  /**
   * Creates a new Bible Passage instance.
   * @constructs BibleApiPassage.
   * @param {string} apiKey - The Bible API Key.
   * @param {string} baseUrl - The base url (Default: https://pt-br.bibles.org/v2/).
   */

  function BibleApiPassage(apiKey, baseUrl) {
    _classCallCheck(this, BibleApiPassage);

    _get(Object.getPrototypeOf(BibleApiPassage.prototype), 'constructor', this).call(this, apiKey, baseUrl);
  }

  /**
   * Get bible passages
   * @method
   * @param {Object} args - The url arguments.
   * @param {string} args.baseUrl - The base url (Default: https://pt-br.bibles.org/v2/).
   * @param {string} args.chapter - Book chapter
   * @param {string} args.start - Starting verse.
   * @param {string} args.end - Ending verse (If empty use start argument).
   * @param {string} args.version - Bible version (Default: por-NTLH).
   * @returns {Array} passages
   */

  _createClass(BibleApiPassage, [{
    key: 'getPassage',
    value: function getPassage(args) {
      args = args || {};

      var defaults = {
        baseUrl: 'https://pt-br.bibles.org/v2/',
        version: 'por-NTLH'
      };

      args = inherits(args, defaults);

      this.validate(args, ['version', 'start', 'book', 'chapter']);

      var passage = args.end ? _util2['default'].format('%s-%s', args.start, args.end) : args.start;

      var url = this.getUrl({
        baseUrl: args.baseUrl,
        resource: 'passages',
        query: _util2['default'].format('version=%s&q[]=%s+%s:%s', args.version, args.book, args.chapter, passage)
      });

      return this.getJson.bind(this, url)();
    }
  }]);

  return BibleApiPassage;
})(_base2['default']);

exports['default'] = BibleApiPassage;
module.exports = exports['default'];